buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id "java"
	id "org.springframework.boot" version "2.7.11-SNAPSHOT"
	id "io.spring.dependency-management" version "1.0.15.RELEASE"
}

group = "com.recruit"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "11"


repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/snapshot" }
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"

	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}" // Querydsl JPA 모듈
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jpa" // Q 클래스 생성
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api:2.2.3' // Querydsl JPAAnnotationProcessor을 사용
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api:1.3.5' // Querydsl JPAAnnotationProcessor을 사용?

	implementation "org.springframework.boot:spring-boot-starter-validation" // 유효성 검사
	implementation "org.springframework.security:spring-security-crypto:5.7.8" // 암호화
	implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3" // 복호화
	implementation "org.springdoc:springdoc-openapi-ui:1.6.9" // swagger
	implementation "org.reflections:reflections:0.9.12" // reflections

	implementation 'org.mapstruct:mapstruct:1.5.1.Final' // MapStruct 의존성 추가
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.1.Final' // MapStruct Annotation Processor 사용 지정
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0' // lombok mapstruct error

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'   // Lombok Annotation Processor 사용 지정
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

def generated = 'src/main/generated'

sourceSets {
	main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile){
	options.annotationProcessorGeneratedSourcesDirectory(file(generated))
}

clean.doLast{
	file(generated).deleteDir()
}

tasks.named("test") {
	useJUnitPlatform()
	systemProperty "jasypt.encryptor.password", project.getProperties().get("jasypt.encryptor.password")
}
